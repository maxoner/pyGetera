import pandas as pd
from directory import Config


def extract(config: Config,
            execute: bool = True,
            isotope=None,           # —â–æ –∑–∞ –∫–æ—Å—Ç—ã–ª—å
            table_view=False,
            format=None,
            columns=None) -> dict | pd.DataFrame:        

    if execute:
        getera_io.execute(config)

    #----====Main-loop====----
    with open(self.getera_path + self.io_files['OUTGET'], 'r') as f:
        fileIter = f.__iter__()
        parser = Parser(fileIter)

        cases = {
            MACRO_STRING: parser.parse_macro(),     # –∞ –ø–æ—á–µ–º—É –±—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä–µ? ü§î 
            COEFF_STRING: parser.parse_coefs()}     # —Å–ª–æ–≤–∞—Ä—å, —Å —Å–µ—Ç–¥–µ—Ñ–∞—É–ª—Ç–æ–º –∫–æ—Ç—Ä—ã–π –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Ä–µ–≥—ç–∫—Å–ø—ã.
        if isotope:
            cases[ISOTOPE_STRING1] = parser.parse_isotopes(isotope)
            cases[ISOTOPE_STRING2] = parser.parse_isotopes(isotope)
        burn_case = parser.parse_burn()
        burn_case.send(None)

        while True:
            try:
                curr_line = next(fileIter)
                try: 
                    next(cases[curr_line])
                except KeyError:
                    if burn.match(curr_line):
                        burn_case.send(curr_line)
                    else:
                        continue
            except StopIteration:
                break

    if format == 'pandas':
        table = DataPostProcessor.make_dataframe(parser.parsed_data, columns)
        return table
    elif not columns:
        return parser.parsed_data
    else:
        return {i: parser.parsed_data[i] for i in columns}
